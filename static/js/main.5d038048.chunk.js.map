{"version":3,"sources":["components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","handleChange","event","change","target","value","className","this","location","country","temp","degree","main","description","src","icon","wind","type","name","checked","onChange","React","Component","App","convert","d","alert","setState","fetchData","a","state","searchTerm","fetch","mode","response","json","result","setData","sys","weather","speed","console","log","background","EditSearchTerm","e","onSubmit","preventDefault","then","catch","count","style","parseFloat","toFixed","placeholder","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5d038048.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Weather extends React.Component {\n    constructor(props) {\n        super(props);\n      \n    }\n    handleChange = (event) => {\n        this.props.change(event.target.value);\n    }\n     render() {\n\n        return(\n            <div className='weather-container'>\n                <h2>{this.props.location}, {this.props.country}</h2>\n\n                <p>Temperature: {this.props.temp}{this.props.degree}</p>\n                <p>{this.props.main}</p>\n                <p>{this.props.description}</p>\n                <img src={\"http://openweathermap.org/img/w/\" + this.props.icon + \".png\"}/>\n                <p>wind speed: {this.props.wind}</p>\n                <span >\n                °C\n                <input type='radio' name='degree' value='°C'\n                    checked={this.props.degree === '°C'}\n                    onChange={this.handleChange} />\n                </span>\n                <span>\n                °F\n                <input type='radio' name='degree' value='°F'\n                    checked={this.props.degree === '°F'}\n                    onChange={this.handleChange} />\n \n                </span>\n                \n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { Weather } from './components/weather';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.count = 0;\n    this.state = {\n      weather: {\n        name: '',\n        country: '',\n        temp: 0,\n        main: '',\n        description: '',\n        icon: '',\n        wind: 0\n      \n    },\n    searchTerm: 'Port-Louis',\n    background: '',\n    degree: \"°C\"\n  }\n    //this.process = this.process.bind(this);\n    //this.fetchData = this.fetchData.bind(this);\n    }\n    convert = (d) => {\n      alert('changinf');\n        this.setState({\n          degree: d\n\n        })\n   \n\n  }\n\n\n\n    fetchData = async () => {\n      //alert(location)\n      const location = this.state.searchTerm;\n      const response = await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\"+ location + \"&units=metric&appid=3017eb991209d1e2a45630fa15d294ce\", {mode: 'cors'});\n      const result = await response.json();\n      return result;\n\n    }\n\n    setData = (result) => {\n      const country = result.sys.country;\n      const temp = result.main.temp;\n      const main = result.weather[0].main;\n      const description = result.weather[0].description;\n      const icon = result.weather[0].icon;\n      const wind = result.wind.speed;\n      const name = result.name;\n      console.log(result);\n      this.setState({\n        weather : {\n                    country: country,\n                    name: name,\n                    temp: temp,\n                    main: main,\n                    description: description,\n                    icon: icon,\n                    wind: wind\n\n            },\n            background: \"https://source.unsplash.com/1600x900/?$\" + this.state.searchTerm,\n            \n          }\n            )\n  \n    }\n    EditSearchTerm = (e) => {\n      this.setState({\n        searchTerm: e.target.value,\n        \n      })\n  \n    }\n\n    onSubmit = (e) => {\n      e.preventDefault();\n      //alert(e.target.value);\n      this.fetchData()\n          .then(this.setData)\n          .catch((e) => {\n            console.log(e);\n          });\n    };\n\n    render() {\n      //{this.fetchData('Montreal')}\n      if (this.count == 0){\n        this.fetchData()\n          .then(this.setData)\n          .catch((e) => {\n            console.log(e);\n        });\n        this.count += 1;\n\n      }\n      const style = {\n        background: `url(${this.state.background})`\n      }\n      let temp = this.state.weather.temp;\n      \n      switch(this.state.degree) {\n        case '°F':\n          temp = parseFloat(this.state.weather.temp * (9/5) + 32).toFixed(2);\n          break;\n        case '°C':\n          temp = this.state.weather.temp;\n          break;\n        default:\n          temp= this.state.weather.temp;\n      }\n      console.log(temp);\n    \n      return (\n        <div className=\"App\" style={style}>\n        <div className='Titlebar'><h1>WeatherApp</h1></div>\n        <div className='container'>\n          \n          <form onSubmit={this.onSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Search for a city...\"\n              className=\"location-search\"\n              onChange={this.EditSearchTerm}\n              />\n              <button className=\"change-weather-btn\"><i className='material-icons s'>search</i></button>\n          </form>\n          \n\n          <Weather country={this.state.weather.country} location={this.state.weather.name} temp={temp} main={this.state.weather.main} description={this.state.weather.description} icon={this.state.weather.icon} wind={this.state.weather.wind} degree={this.state.degree} change={(degree) => this.convert(degree)}/>\n        </div>\n        </div>\n      );\n\n    }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}